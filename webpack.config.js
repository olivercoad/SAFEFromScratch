// Basic configuration for development.
// A more robust guide can be found here: https://github.com/fable-compiler/webpack-config-template
const path = require("path");
const CopyPlugin = require("copy-webpack-plugin");
const HtmlWebpackPlugin = require('html-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');

const CONFIG = {
    // The tags to include the generated JS and CSS will be automatically injected in the HTML template
    // See https://github.com/jantimon/html-webpack-plugin
    indexHtmlTemplate: './src/Client/index.html',
    fsharpEntry: "./src/Client/output/App.js",
    outputDir: "./deploy/public",
    assetsDir: './src/Client/public',
    devServerPort: 8080,
    // When using webpack-dev-server, you may need to redirect some calls
    // to a external API server. See https://webpack.js.org/configuration/dev-server/#devserver-proxy
    devServerProxy: {
        // redirect requests that start with /api/ to the server on port 8085
        '/api/**': {
            target: 'http://localhost:' + (process.env.SERVER_PROXY_PORT || "8085"),
            changeOrigin: true
        },
        // redirect websocket requests that start with /socket/ to the server on the port 8085
        '/socket/**': {
            target: 'http://localhost:' + (process.env.SERVER_PROXY_PORT || "8085"),
            ws: true
        }
    }
}

// The NODE_ENV is passed to npm for example: npm run start --node-env=development
process.env.NODE_ENV = process.env.NODE_ENV ?? "development";
const isProduction = process.env.NODE_ENV === 'production';
const environment = isProduction ? 'production' : 'development';
console.log('Bundling for ' + environment + '...');

const getPlugins = () => {
    const commonPlugins = [
        // The HtmlWebpackPlugin allows us to use a template for the index.html page
        // and automatically injects <script> or <link> tags for generated bundles.
        new HtmlWebpackPlugin({
            filename: 'index.html',
            template: path.join(__dirname, CONFIG.indexHtmlTemplate)
        }),
        // Copies static assets to output directory
        new CopyPlugin({
            patterns: [
                // by default copies to output folder
                { from: path.join(__dirname, CONFIG.assetsDir) }
            ],
        }),
    ];
    return isProduction ?
        [
            ...commonPlugins,

            // https://webpack.js.org/plugins/mini-css-extract-plugin/
            // extracts CSS into separate files. It creates a CSS file per JS file which contains CSS.
            new MiniCssExtractPlugin({ filename: 'style.[name].[fullhash].css' }),
        ] :
        commonPlugins;
}

module.exports = {
    // required property, either "development" or "production".
    mode: environment,
    // Webpack uses this file as a starting point for dependency tree walking.
    // We use the main file generated by Fable.
    entry: CONFIG.fsharpEntry,
    // integrated in webpack, controls how source maps are generated https://webpack.js.org/configuration/devtool/
    devtool: isProduction ? 'source-map' : 'eval-source-map',
    // the resulting output
    output: {
        // An absolute path for the resulting bundle.
        path: path.join(__dirname, CONFIG.outputDir),
        // for production we use a hash so it can be cached unless the hash changes
        filename: isProduction ? '[name].[fullhash].js' : '[name].js'
    },
    devServer: {
        static: CONFIG.outputDir,
        // hot true automatically adds Hot Module Replacement, no longer needed to add the plugin new webpack.HotModuleReplacementPlugin()
        hot: true,
        port: CONFIG.devServerPort,
        proxy: CONFIG.devServerProxy,
    },
    plugins: getPlugins(),
    optimization: {
        splitChunks: {
            chunks: 'all'
        },
    },
    resolve: {
        // See https://github.com/fable-compiler/Fable/issues/1490
        symlinks: false
    },
    module: {
        // Loaders allow webpack to process files other than JS and convert them into valid
        // modules that can be consumed by your application and added to the dependency graph
        rules: [
            // style loaders
            {
                // The test property identifies which file or files should be transformed.
                test: /\.(sass|scss|css)$/,
                // The use property indicates which loader should be used to do the transforming.
                use: [
                    isProduction ? MiniCssExtractPlugin.loader : 'style-loader',
                    {
                        loader: 'css-loader',
                        options: isProduction ? {} : { sourceMap: true, },
                    },
                    {
                        loader: 'sass-loader',
                        options: isProduction ? {} : { sourceMap: true, },
                    }
                ]
            },
            // JS source map loader https://webpack.js.org/loaders/source-map-loader/
            // extracts existing source maps from all JavaScript entries and passes them to the specified devtool
            {
                test: /\.js$/,
                enforce: "pre",
                use: ['source-map-loader']
            },
            // https://webpack-v3.jsx.app/loaders/file-loader/
            // Moves files referenced in the code (fonts, images) into output folder
            {
                test: /\.(png|jpg|jpeg|gif|svg|woff|woff2|ttf|eot)(\?.*)?$/,
                use: ['file-loader']
            },
        ]
    }
}
