// Basic configuration for development.
// A more robust guide can be found here: https://github.com/fable-compiler/webpack-config-template
const path = require("path");
const CopyPlugin = require("copy-webpack-plugin");
const HtmlWebpackPlugin = require('html-webpack-plugin');

const CONFIG = {
    // The tags to include the generated JS and CSS will be automatically injected in the HTML template
    // See https://github.com/jantimon/html-webpack-plugin
    indexHtmlTemplate: './src/Client/index.html',
    fsharpEntry: "./src/Client/output/App.js",
    outputDir: "./src/Client/dist",
    assetsDir: './src/Client/public',
    devServerPort: 8080,
    // When using webpack-dev-server, you may need to redirect some calls
    // to a external API server. See https://webpack.js.org/configuration/dev-server/#devserver-proxy
    devServerProxy: {
        // redirect requests that start with /api/ to the server on port 8085
        '/api/**': {
            target: 'http://localhost:' + (process.env.SERVER_PROXY_PORT || "8085"),
            changeOrigin: true
        },
        // redirect websocket requests that start with /socket/ to the server on the port 8085
        '/socket/**': {
            target: 'http://localhost:' + (process.env.SERVER_PROXY_PORT || "8085"),
            ws: true
        }
    }
}

module.exports = {
    // required property, either "development" or "production".
    mode: "development",
    // Webpack uses this file as a starting point for dependency tree walking.
    // We use the main file generated by Fable.
    entry: CONFIG.fsharpEntry,
    // integrated in webpack, controls how source maps are generated https://webpack.js.org/configuration/devtool/
    devtool: "eval-source-map",
    // the resulting output
    output: {
        // An absolute path for the resulting bundle.
        path: path.join(__dirname, CONFIG.outputDir),
        // the resulting file, by convention bundle.js
        filename: "bundle.js",
    },
    devServer: {
        static: CONFIG.outputDir,
        // hot true automatically adds Hot Module Replacement, no longer needed to add the plugin new webpack.HotModuleReplacementPlugin()
        hot: true,
        port: CONFIG.devServerPort,
        proxy: CONFIG.devServerProxy,
    },
    plugins: [
        new HtmlWebpackPlugin({
            filename: 'index.html',
            template: path.join(__dirname, CONFIG.indexHtmlTemplate)
        }),
        new CopyPlugin({
            patterns: [
                // by default copies to output folder
                { from: path.join(__dirname, CONFIG.assetsDir) }
            ],
        }),
    ],
    module: {
        // Loaders allow webpack to process files other than JS and convert them into valid
        // modules that can be consumed by your application and added to the dependency graph
        rules: [
            // style loaders
            {
                // The test property identifies which file or files should be transformed.
                test: /\.(sass|scss|css)$/,
                // The use property indicates which loader should be used to do the transforming.
                use: [
                    'style-loader',
                    {
                        loader: 'css-loader',
                        options: {
                            sourceMap: true,
                        },
                    },
                    {
                        loader: 'sass-loader',
                        options: {
                            sourceMap: true,
                        },
                    }
                ]
            },
            // JS source map loader https://webpack.js.org/loaders/source-map-loader/
            // extracts existing source maps from all JavaScript entries and passes them to the specified devtool
            {
                test: /\.js$/,
                enforce: "pre",
                use: ['source-map-loader']
            }
        ]
    }
}
